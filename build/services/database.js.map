{"version":3,"sources":["../../src/services/database.js"],"names":["setupModels","connection","models","Object","keys","forEach","key","schema","model","Database","constructor","_models","connect","uri","mongoose","disconnect","close","getModel","name"],"mappings":";;;;;;;AAAA;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,CAAqBC,UAArB,EAAiCC,MAAjC,EAAyC;AACvCC,SAAOC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA6BC,GAAD,IAAS;AACnC,UAAMC,SAASL,OAAOI,GAAP,CAAf;AACAL,eAAWO,KAAX,CAAiBF,GAAjB,EAAsBC,MAAtB;AACD,GAHD;AAID;;AAEc,MAAME,QAAN,CAAe;AAC5B;;;;AAIAC,cAAYR,SAAS,EAArB,EAAyB;AACvB,SAAKS,OAAL,GAAeT,MAAf;AACD;AACD;;;;;;AAIA,QAAMU,OAAN,CAAcC,GAAd,EAAmB;AACjB,UAAMC,kBAASF,OAAT,CAAiBC,GAAjB,CAAN,CADiB,CAEjB;AACA;AACA;AACA;;AACAb,gBAAYc,kBAASb,UAArB,EAAiC,KAAKU,OAAtC;AACD;AAED;;;;;;AAIA,QAAMI,UAAN,GAAmB;AACjB,UAAMD,kBAASb,UAAT,CAAoBe,KAApB,EAAN,CADiB,CAEjB;AACA;AACA;AACA;AACA;AACD;AAED;;;;;;;AAKAC,WAASC,IAAT,EAAe;AACb,WAAOJ,kBAASb,UAAT,CAAoBO,KAApB,CAA0BU,IAA1B,CAAP;AACD;;AAzC2B","sourcesContent":["import mongoose from 'mongoose'\n// mongoose.Promise = Promise\n\n// /**\n//  * Close a given connection to the database.\n//  * @param {Connection} connection - connection to close\n//  */\n// async function disconnect(connection) {\n//   try {\n//     await connection.close()\n//   } catch (error) {\n//     throw error\n//   }\n// }\n\n// /**\n//  * Create a connection to a database at URL.\n//  * @param {String} url - the url of the database\n//  * @returns {Connection} An open mongoose connection.\n//  */\n// async function connect(url) {\n//   const connection = mongoose.createConnection()\n//   try {\n//     await connection.openUri(url)\n//     return connection\n//   } catch (error) {\n//     throw error\n//   }\n// }\n\nfunction setupModels(connection, models) {\n  Object.keys(models).forEach((key) => {\n    const schema = models[key]\n    connection.model(key, schema)\n  })\n}\n\nexport default class Database {\n  /**\n   * Create new database instance.\n   * @param {object} [modelsMap] Map of models to assign to the connection\n   */\n  constructor(models = {}) {\n    this._models = models\n  }\n  /**\n   * Connect to the database.\n   * @param {string} uri the url of the database to connect to\n   */\n  async connect(uri) {\n    await mongoose.connect(uri)\n    // if (this._connection) {\n    //   throw new Error('Connection already established')\n    // }\n    // this._connection = await connect(url)\n    setupModels(mongoose.connection, this._models)\n  }\n\n  /**\n   * Disconnect from the database.\n   * @throws {Error} An error if connection was not open\n   */\n  async disconnect() {\n    await mongoose.connection.close()\n    // if (!this._connection) {\n    //   throw new Error('Connection not established')\n    // }\n    // await disconnect(this._connection)\n    // this._connection = null\n  }\n\n  /**\n   * Return a model for a particular schema.\n   * @param {String} name name of the model\n   * @returns {Model} A mongoose model.\n   */\n  getModel(name) {\n    return mongoose.connection.model(name)\n  }\n}\n"],"file":"database.js"}