{"version":3,"sources":["../../src/lib/setup-middleware.js"],"names":["setupCompress","app","config","fn","threshold","flush","Z_SYNC_FLUSH","setupKoa2Jsx","wireframe","useWireframe","setupCheckAuth","setupSession","keys","Array","isArray","Error","ses","setupCsrf","csrf","CSRF","setupMulter","dest","resolvedDir","uploadDirTestPath","upload","setupBodyParser","bodyparser","setupLogger","map","session","multer","compress","checkauth","logger","koa2Jsx","initMiddleware","name","conf","function","use","rest","res","bootstrap","setupMiddleware","middleware","Object","reduce","acc","installed"],"mappings":"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","sourcesContent":["import session from 'koa-session'\nimport CSRF from 'koa-csrf'\nimport multer from 'koa-multer'\nimport bodyParser from 'koa-bodyparser'\nimport logger from 'koa-logger'\nimport { ensurePath } from 'wrote'\nimport { join, resolve } from 'path'\nimport koa2Jsx, { wireframe, bootstrap } from 'koa2-jsx'\nimport compress from 'koa-compress'\nimport { Z_SYNC_FLUSH } from 'zlib'\n\nimport checkAuth from './check-auth'\n\nfunction setupCompress(app, config) {\n  const fn = compress({\n    threshold: 1024,\n    flush: Z_SYNC_FLUSH,\n    ...config,\n  })\n  return fn\n}\nfunction setupKoa2Jsx(app, config, { wireframe: useWireframe }) {\n  const fn = koa2Jsx({\n    ...(useWireframe ? wireframe : {}),\n    ...config,\n  })\n  return fn\n}\nfunction setupCheckAuth() {\n  return checkAuth()\n}\nfunction setupSession(app, config, { keys }) {\n  if (!Array.isArray(keys)) {\n    throw new Error('Keys must be an array')\n  }\n  app.keys = keys\n  const ses = session(config, app)\n  return ses\n}\nfunction setupCsrf(app, config) {\n  const csrf = new CSRF(config)\n  return csrf\n}\nasync function setupMulter(app, config = {}) {\n  if (typeof config.dest != 'string') {\n    throw new Error('expecting uploadDir for multer')\n  }\n  const resolvedDir = resolve(config.dest)\n  const uploadDirTestPath = join(resolvedDir, 'test.data')\n  await ensurePath(uploadDirTestPath)\n  const upload = multer(config)\n  return upload\n}\nfunction setupBodyParser(app, config) {\n  const bodyparser = bodyParser(config)\n  return bodyparser\n}\nfunction setupLogger() {\n  return logger()\n}\n\nconst map = {\n  session: setupSession,\n  multer: setupMulter,\n  csrf: setupCsrf,\n  compress: setupCompress,\n  bodyparser: setupBodyParser,\n  checkauth: setupCheckAuth,\n  logger: setupLogger,\n  koa2Jsx: setupKoa2Jsx,\n}\n\nasync function initMiddleware(name, conf, app) {\n  const fn = typeof conf.function == 'function' ? conf.function : map[name]\n  if (typeof fn !== 'function') {\n    throw new Error(`Expecting function for ${name} middleware`)\n  }\n  const { use, config = {}, ...rest } = conf\n  const res = await fn(app, config, rest)\n  if (use) {\n    app.use(res)\n  }\n  if (name == 'koa2Jsx' && use && rest.bootstrap) {\n    app.use(bootstrap)\n  }\n  return res\n}\n\nexport default async function setupMiddleware(middleware = {}, app) {\n  const res = await Object.keys(middleware)\n    .reduce(async (acc, name) => {\n      const res = await acc\n      const conf = middleware[name]\n      const installed = await initMiddleware(name, conf, app)\n      return {\n        ...res,\n        [name]: installed,\n      }\n    }, {})\n  return res\n}\n"],"file":"setup-middleware.js"}