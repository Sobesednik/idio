{"version":3,"sources":["../../src/lib/setup-middleware.js"],"names":["setupStatic","app","config","root","maxage","mount","roots","Array","isArray","m","map","r","fn","c","setupCompress","threshold","flush","Z_SYNC_FLUSH","setupKoa2Jsx","wireframe","pretty","static","_static","koa2Wireframe","setupCheckAuth","setupSession","keys","Error","ses","setupCsrf","csrf","CSRF","setupMulter","dest","resolvedDir","uploadDirTestPath","upload","setupBodyParser","bodyparser","setupLogger","session","multer","compress","checkauth","logger","koa2Jsx","initMiddleware","name","conf","function","use","rest","res","bootstrap","setupMiddleware","middleware","Object","reduce","acc","installed"],"mappings":"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","sourcesContent":["import session from 'koa-session'\nimport CSRF from 'koa-csrf'\nimport multer from 'koa-multer'\nimport bodyParser from 'koa-bodyparser'\nimport logger from 'koa-logger'\nimport { ensurePath } from 'wrote'\nimport { join, resolve } from 'path'\nimport koa2Jsx, { wireframe as koa2Wireframe, bootstrap } from 'koa2-jsx'\nimport compress from 'koa-compress'\nimport serve from 'koa-static'\nimport compose from 'koa-compose'\nimport { Z_SYNC_FLUSH } from 'zlib'\nimport Mount from 'koa-mount'\nimport checkAuth from './check-auth'\n\nfunction setupStatic(app, config, {\n  root = [],\n  maxage,\n  mount,\n}) {\n  const roots = Array.isArray(root) ? root : [root]\n  const m = roots.map((r) => {\n    const fn = serve(r, {\n      maxage,\n      ...config,\n    })\n    return fn\n  })\n  const c = compose(m)\n  if (mount) return Mount(mount, c)\n  return c\n}\n\nfunction setupCompress(app, config, {\n  threshold = 1024,\n}) {\n  const fn = compress({\n    threshold,\n    flush: Z_SYNC_FLUSH,\n    ...config,\n  })\n  return fn\n}\nfunction setupKoa2Jsx(app, config, {\n  wireframe,\n  pretty = false,\n  static: _static = true,\n}) {\n  const fn = koa2Jsx({\n    ...(wireframe ? koa2Wireframe : {}),\n    static: _static,\n    pretty,\n    ...config,\n  })\n  return fn\n}\nfunction setupCheckAuth() {\n  return checkAuth()\n}\nfunction setupSession(app, config, { keys }) {\n  if (!Array.isArray(keys)) {\n    throw new Error('Keys must be an array')\n  }\n  app.keys = keys\n  const ses = session(config, app)\n  return ses\n}\nfunction setupCsrf(app, config) {\n  const csrf = new CSRF(config)\n  return csrf\n}\nasync function setupMulter(app, config = {}) {\n  if (typeof config.dest != 'string') {\n    throw new Error('expecting uploadDir for multer')\n  }\n  const resolvedDir = resolve(config.dest)\n  const uploadDirTestPath = join(resolvedDir, 'test.data')\n  await ensurePath(uploadDirTestPath)\n  const upload = multer(config)\n  return upload\n}\nfunction setupBodyParser(app, config) {\n  const bodyparser = bodyParser(config)\n  return bodyparser\n}\nfunction setupLogger() {\n  return logger()\n}\n\nconst map = {\n  session: setupSession,\n  multer: setupMulter,\n  csrf: setupCsrf,\n  compress: setupCompress,\n  bodyparser: setupBodyParser,\n  checkauth: setupCheckAuth,\n  logger: setupLogger,\n  koa2Jsx: setupKoa2Jsx,\n  static: setupStatic,\n}\n\nasync function initMiddleware(name, conf, app) {\n  const fn = typeof conf.function == 'function' ? conf.function : map[name]\n  if (typeof fn !== 'function') {\n    throw new Error(`Expecting function for ${name} middleware`)\n  }\n  const { use, config = {}, ...rest } = conf\n  const res = await fn(app, config, rest)\n  if (use) {\n    app.use(res)\n  }\n  if (name == 'koa2Jsx' && use && rest.bootstrap) {\n    app.use(bootstrap)\n  }\n  return res\n}\n\nexport default async function setupMiddleware(middleware = {}, app) {\n  const res = await Object.keys(middleware)\n    .reduce(async (acc, name) => {\n      const res = await acc\n      const conf = middleware[name]\n      const installed = await initMiddleware(name, conf, app)\n      return {\n        ...res,\n        [name]: installed,\n      }\n    }, {})\n  return res\n}\n"],"file":"setup-middleware.js"}