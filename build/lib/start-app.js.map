{"version":3,"sources":["../../src/lib/start-app.js"],"names":["debuglog","DEFAULT_PORT","DEFAULT_HOST","DEFAULT_MONGO","disconnectFromDatabase","db","disconnect","destroy","server","Promise","resolve","on","listen","app","port","hostname","cb","r","j","ec","err","e","removeListener","once","startApp","config","databaseURL","host","autoConnect","process","kill","pid","Database","appMeta","all","serverPort","address","url","router","connect"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAA6C;AAE7C,MAAMA,WAAW,oBAAG,MAAH,CAAjB;AAEA,MAAMC,eAAe,IAArB;AACA,MAAMC,eAAe,SAArB;AACA,MAAMC,gBAAgB,2BAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeC,sBAAf,CAAsCC,EAAtC,EAA0C;AACxC,QAAMA,GAAGC,UAAH,EAAN;AACAN,WAAS,gCAAT;AACD;;AAED,eAAeO,OAAf,CAAuBC,MAAvB,EAA+B;AAC7B,QAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC7BF,WAAOG,EAAP,CAAU,OAAV,EAAmBD,OAAnB;AACAF,WAAOD,OAAP;AACD,GAHK,CAAN;AAIAP,WAAS,sBAAT;AACD;AAED;;;;;;;AAKA,SAASY,MAAT,CAAgBC,GAAhB,EAAqBC,IAArB,EAA2BC,WAAW,SAAtC,EAAiD;AAC/C,QAAMC,KAAK,qBAAO,IAAP,CAAX;AACA,SAAO,IAAIP,OAAJ,CAAY,CAACQ,CAAD,EAAIC,CAAJ,KAAU;AAC3B,UAAMC,KAAMC,GAAD,IAAS;AAClB,YAAMC,IAAIL,GAAGI,GAAH,CAAV;AACAF,QAAEG,CAAF;AACD,KAHD;;AAIA,UAAMb,SAASK,IAAID,MAAJ,CAAWE,IAAX,EAAiBC,QAAjB,EAA2B,MAAM;AAC9CE,QAAET,MAAF;AACAK,UAAIS,cAAJ,CAAmB,OAAnB,EAA4BH,EAA5B;AACD,KAHc,EAGZI,IAHY,CAGP,OAHO,EAGEJ,EAHF,CAAf;AAID,GATM,CAAP;AAUD;AAED;;;;;;;AAKe,eAAeK,QAAf,CAAwBC,SAAS,EAAjC,EAAqC;AAClD,QAAM;AACJC,kBAAcvB,aADV;AAEJW,WAAOb,YAFH;AAGJ0B,WAAOzB,YAHH;AAIJ0B,kBAAc;AAJV,MAKFH,MALJ,CADkD,CAQlD;;AACAI,UAAQN,IAAR,CAAa,SAAb,EAAwB,YAAY;AAClC,UAAMV,IAAIN,OAAJ,EAAN;AACAsB,YAAQC,IAAR,CAAaD,QAAQE,GAArB,EAA0B,SAA1B;AACD,GAHD;AAKA,QAAM1B,KAAK,IAAI2B,iBAAJ,EAAX;AAEA,QAAMC,UAAU,MAAM,wBAAUR,MAAV,EAAkBpB,EAAlB,CAAtB;AACA,QAAM;AAAEQ;AAAF,MAAUoB,OAAhB;AAEA,QAAMzB,SAAS,MAAMI,OAAOC,GAAP,EAAYC,IAAZ,EAAkBa,IAAlB,CAArB;AAEA,8BAAcnB,MAAd;;AACAK,MAAIN,OAAJ,GAAc,YAAY;AACxB,UAAME,QAAQyB,GAAR,CAAY,CAChB9B,uBAAuBC,EAAvB,CADgB,EAEhBE,QAAQC,MAAR,CAFgB,CAAZ,CAAN;AAID,GALD;;AAMA,QAAM;AAAEM,UAAMqB;AAAR,MAAuB3B,OAAO4B,OAAP,EAA7B;AAEA,QAAMC,MAAO,oBAAmBF,UAAW,EAA3C;AAEA,QAAMG,SAAS,yBAAf;;AAEA,QAAMC,UAAU,YAAY;AAC1B,UAAMlC,GAAGkC,OAAH,CAAWb,WAAX,CAAN;AACD,GAFD;;AAGA,MAAIE,WAAJ,EAAiB;AACf,UAAMW,SAAN;AACD;;AACD,SAAO,EAAE,GAAGN,OAAL;AAAcK,UAAd;AAAsBD,OAAtB;AAA2B,QAAIT,cAAc,EAAd,GAAmB;AAAEW;AAAF,KAAvB;AAA3B,GAAP;AACD","sourcesContent":["import { debuglog as dl } from 'util'\nimport enableDestroy from 'server-destroy'\nimport Router from 'koa-router'\nimport erotic from 'erotic'\nimport Database from '../services/database'\nimport createApp from './create-app'\nimport { AppReturn, Config } from '../types' // eslint-disable-line no-unused-vars\n\nconst debuglog = dl('idio')\n\nconst DEFAULT_PORT = 5000\nconst DEFAULT_HOST = '0.0.0.0'\nconst DEFAULT_MONGO = 'mongodb://localhost:27017'\n\n// async function connectToDatabase(url) {\n//   debuglog('connecting to the database')\n//   const db = new Database()\n//   // mongod --dbpath=data --port 27017 or use deamon\n//   await db.connect(url)\n//   debuglog('connected to the database')\n//   return db\n// }\n\nasync function disconnectFromDatabase(db) {\n  await db.disconnect()\n  debuglog('disconnected from the database')\n}\n\nasync function destroy(server) {\n  await new Promise((resolve) => {\n    server.on('close', resolve)\n    server.destroy()\n  })\n  debuglog('destroyed the server')\n}\n\n/**\n * @param {Koa} app\n * @param {number} [port]\n * @param {string} [hostname]\n */\nfunction listen(app, port, hostname = '0.0.0.0') {\n  const cb = erotic(true)\n  return new Promise((r, j) => {\n    const ec = (err) => {\n      const e = cb(err)\n      j(e)\n    }\n    const server = app.listen(port, hostname, () => {\n      r(server)\n      app.removeListener('error', ec)\n    }).once('error', ec)\n  })\n}\n\n/**\n * Start the server.\n * @param {Config} [config] configuration object\n * @returns {AppReturn} An object with variables\n */\nexport default async function startApp(config = {}) {\n  const {\n    databaseURL = DEFAULT_MONGO,\n    port = DEFAULT_PORT,\n    host = DEFAULT_HOST,\n    autoConnect = true,\n  } = config\n\n  // close all connections when running nodemon\n  process.once('SIGUSR2', async () => {\n    await app.destroy()\n    process.kill(process.pid, 'SIGUSR2')\n  })\n\n  const db = new Database()\n\n  const appMeta = await createApp(config, db)\n  const { app } = appMeta\n\n  const server = await listen(app, port, host)\n\n  enableDestroy(server)\n  app.destroy = async () => {\n    await Promise.all([\n      disconnectFromDatabase(db),\n      destroy(server),\n    ])\n  }\n  const { port: serverPort } = server.address()\n\n  const url = `http://localhost:${serverPort}`\n\n  const router = Router()\n\n  const connect = async () => {\n    await db.connect(databaseURL)\n  }\n  if (autoConnect) {\n    await connect()\n  }\n  return { ...appMeta, router, url, ...(autoConnect ? {} : { connect }) }\n}\n"],"file":"start-app.js"}