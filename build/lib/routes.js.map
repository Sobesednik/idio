{"version":3,"sources":["../../src/lib/routes.js"],"names":["filterJsx","route","test","removeExtension","replace","reducePaths","acc","fn","path","importRoute","dir","file","defaultImports","mod","require","default","_route","getName","method","toUpperCase","addRoutes","routes","router","getMiddleware","aliases","res","Object","keys","reduce","middleware","name","a","al","map","alias","aliasName","readRoutes","filter","content","topLevel","methods","type","files","modules","initRoutes","methodAliases","r","initRoutes2","appMiddleware","makeGetMiddleware","getChain","chain","m","s"],"mappings":"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","sourcesContent":["import { readDirStructure } from 'wrote'\nimport { resolve } from 'path'\nimport RoutesConfig from '../types/RoutesConfig' // eslint-disable-line\n\nconst filterJsx = route => /\\.jsx?$/.test(route)\n\nexport const removeExtension = (route) => {\n  return `${route.replace(/\\.jsx?$/, '')}`\n}\n\nconst reducePaths = (acc, { route, fn, path }) => {\n  fn.path = path\n  return {\n    ...acc,\n    [route]: fn,\n  }\n}\n\nexport const importRoute = (dir, file, defaultImports = false) => {\n  const route = `/${removeExtension(file)}`\n  const path = resolve(dir, file)\n  const mod = require(path)\n  const fn = defaultImports ? mod.default : mod\n  fn._route = true\n  return { route, fn, path }\n}\n\nexport const getName = (method, path) => `${method.toUpperCase()} ${path}`\n\n/**\n * @param {Object} routes\n * @param {string} method\n * @param {Router} router\n * @param {function} [getMiddleware]\n * @param {{string:[string]}} [aliases]\n * @returns {[string]} An array of routes.\n */\nexport const addRoutes = (routes, method, router, getMiddleware, aliases = {}) => {\n  const res = Object.keys(routes).reduce((acc, route) => {\n    const fn = routes[route]\n    const middleware = typeof getMiddleware == 'function' ? getMiddleware(fn) : [fn]\n    const name = getName(method, route)\n    router[method](name, route, ...middleware)\n\n    const a = aliases[route] || []\n    const al = a.map((alias) => {\n      const aliasName = getName(method, alias)\n      router[method](aliasName, alias, ...middleware)\n      return alias\n    })\n    return { ...acc, [route]: al }\n  }, {})\n  return res\n}\n\nexport const readRoutes = async (dir, {\n  filter = filterJsx,\n  defaultImports = false,\n} = {}) => {\n  const { content: topLevel } = await readDirStructure(dir)\n  const methods = Object.keys(topLevel).reduce((acc, method) => {\n    const { type } = topLevel[method]\n    if (type != 'Directory') return acc\n    const { content: files } = topLevel[method]\n    const modules = Object.keys(files)\n      .filter(filter)\n      .map(file => {\n        const path = resolve(dir, method)\n        const route = importRoute(path, file, defaultImports)\n        return route\n      })\n\n    const routes = modules.reduce(reducePaths, {})\n    return {\n      ...acc,\n      [method]: routes,\n    }\n  }, {})\n  return methods\n}\n\n/**\n * @typedef {Object} InitConfig\n * @property {function} [filter] A function used to filter files found in routes directory.\n * @property {boolean} [defaultImports=false] Whether routes are written with ES6 modules and export\n * a default function\n * @property {boolean} [watch=false] Automatically reload the route when the\n * module file gets updated (does not watch child dependencies).\n */\n\n/**\n *\n * @param {string} dir Path to the routes folder\n * @param {Router} router Instance of koa-router\n * @param {InitConfig} param2\n */\nexport const initRoutes = async (dir, router, {\n  middleware = {},\n  filter = filterJsx,\n  defaultImports,\n  aliases = {},\n} = {}) => {\n  const methods = await readRoutes(dir, { filter, defaultImports })\n\n  Object.keys(methods).reduce((acc, method) => {\n    const routes = methods[method]\n    const getMiddleware = middleware[method]\n    const methodAliases = aliases[method]\n    const r = addRoutes(routes, method, router, getMiddleware, methodAliases)\n    return {\n      ...acc,\n      [method]: r,\n    }\n  }, {})\n\n  return methods\n}\n\n/**\n * Initialise routes.\n * @param {RoutesConfig} routesConfig Routes configuration object.\n * @param {Middleware} appMiddleware Set up middleware map.\n * @param {Router} router Instance of koa-router\n */\nexport const initRoutes2 = async ({\n  dir,\n  middleware = {},\n  filter = filterJsx,\n  defaultImports = true,\n  aliases = {},\n} = {}, appMiddleware, router) => {\n  const methods = await readRoutes(dir, { filter, defaultImports })\n\n  Object.keys(methods).reduce((acc, method) => {\n    const routes = methods[method]\n    const getMiddleware = makeGetMiddleware(method, middleware, appMiddleware)\n    const methodAliases = aliases[method]\n    const r = addRoutes(routes, method, router, getMiddleware, methodAliases)\n    return {\n      ...acc,\n      [method]: r,\n    }\n  }, {})\n\n  return methods\n}\n\nconst makeGetMiddleware = (method, middleware, appMiddleware) => {\n  /**\n   * A function specific for each method which returns full middleware chain for routes. The returned array consists of strings which are keys in the appMiddleware object.\n   * @type {(route: function) => string[]}\n   */\n  const getChain = middleware[method]\n  if (!getChain) {\n    return route => [route]\n  }\n  const getMiddleware = (route) => {\n    const chain = getChain(route)\n    const m = chain.map((s) => {\n      if (typeof s == 'string') {\n        return appMiddleware[s]\n      }\n      return s\n    })\n    return m\n  }\n  return getMiddleware\n}\n"],"file":"routes.js"}