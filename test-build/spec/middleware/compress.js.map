{"version":3,"sources":["../../../test/spec/middleware/compress.js"],"names":["assignRoute","app","url","router","path","body","get","ctx","use","routes","compressTestSuite","context","api","start","readFixture","middleware","compress","fullUrl","res","headers","binary","actual","toString","config","threshold","length"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAAiD;AAEjD,SAASA,WAAT,CAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,MAA/B,EAAuCC,IAAvC,EAA6CC,IAA7C,EAAmD;AACjDF,SAAOG,GAAP,CAAW,MAAX,EAAmBF,IAAnB,EAAyB,MAAOG,GAAP,IAAe;AACtCA,QAAIF,IAAJ,GAAWA,IAAX;AACD,GAFD;AAGAJ,MAAIO,GAAJ,CAAQL,OAAOM,MAAP,EAAR;AACA,SAAQ,GAAEP,GAAI,GAAEE,IAAK,EAArB;AACD;;AAED,MAAMM,oBAAoB;AACxBC,2BADwB;;AAExB;AACA,QAAM,wBAAN,CAA+BC,GAA/B,EAAoC;AAClC,UAAM;AAAEC,WAAF;AAASC;AAAT,QAAyBF,GAA/B;AACA,UAAMP,OAAO,MAAMS,aAAnB;AACA,UAAM;AAAEb,SAAF;AAAOC,SAAP;AAAYC;AAAZ,QAAuB,MAAMU,MAAM;AACvCE,kBAAY;AACVC,kBAAU;AAAER,eAAK;AAAP;AADA;AAD2B,KAAN,CAAnC;AAKA,UAAMS,UAAUjB,YAAYC,GAAZ,EAAiBC,GAAjB,EAAsBC,MAAtB,EAA8B,cAA9B,EAA8CE,IAA9C,CAAhB;AACA,UAAMa,MAAM,MAAM,kBAAID,OAAJ,EAAa;AAC7BE,eAAS;AACP,2BAAmB;AADZ,OADoB;AAI7BC,cAAQ;AAJqB,KAAb,CAAlB;AAMA,UAAMC,SAAS,sBAAWH,GAAX,EAAgBI,QAAhB,EAAf;AACA,uBAAMD,MAAN,EAAchB,IAAd;AACD,GApBuB;;AAqBxB,QAAM,0CAAN,CAAiD;AAAEQ,SAAF;AAASC;AAAT,GAAjD,EAAyE;AACvE,UAAMT,OAAO,MAAMS,aAAnB;AACA,UAAM;AAAEb,SAAF;AAAOC,SAAP;AAAYC;AAAZ,QAAuB,MAAMU,MAAM;AACvCE,kBAAY;AACVC,kBAAU;AAAER,eAAK,IAAP;AAAae,kBAAQ;AAAEC,uBAAWnB,KAAKoB,MAAL,GAAc;AAA3B;AAArB;AADA;AAD2B,KAAN,CAAnC;AAKA,UAAMR,UAAUjB,YAAYC,GAAZ,EAAiBC,GAAjB,EAAsBC,MAAtB,EAA8B,cAA9B,EAA8CE,IAA9C,CAAhB;AACA,UAAMgB,SAAS,MAAM,kBAAIJ,OAAJ,EAAa;AAChCE,eAAS;AACP,2BAAmB;AADZ;AADuB,KAAb,CAArB;AAKA,uBAAME,MAAN,EAAchB,IAAd;AACD;;AAnCuB,CAA1B;eAsCeK,iB","sourcesContent":["import { equal } from 'zoroaster/assert'\nimport rqt from 'rqt'\nimport { gunzipSync } from 'zlib'\nimport context, { Context } from '../../context' // eslint-disable-line no-unused-vars\n\nfunction assignRoute(app, url, router, path, body) {\n  router.get('test', path, async (ctx) => {\n    ctx.body = body\n  })\n  app.use(router.routes())\n  return `${url}${path}`\n}\n\nconst compressTestSuite = {\n  context,\n  /** @param {Context} api */\n  async 'should use compression'(api) {\n    const { start, readFixture } = api\n    const body = await readFixture()\n    const { app, url, router } = await start({\n      middleware: {\n        compress: { use: true },\n      },\n    })\n    const fullUrl = assignRoute(app, url, router, '/dracula.txt', body)\n    const res = await rqt(fullUrl, {\n      headers: {\n        'Accept-Encoding': 'gzip, deflate, br',\n      },\n      binary: true,\n    })\n    const actual = gunzipSync(res).toString()\n    equal(actual, body)\n  },\n  async 'should pass threshold to the constructor'({ start, readFixture }) {\n    const body = await readFixture()\n    const { app, url, router } = await start({\n      middleware: {\n        compress: { use: true, config: { threshold: body.length + 1 } },\n      },\n    })\n    const fullUrl = assignRoute(app, url, router, '/dracula.txt', body)\n    const actual = await rqt(fullUrl, {\n      headers: {\n        'Accept-Encoding': 'gzip, deflate, br',\n      },\n    })\n    equal(actual, body)\n  },\n}\n\nexport default compressTestSuite\n"],"file":"compress.js"}