{"version":3,"sources":["../../test/spec/init-routes.js"],"names":["initRoutesTestSuite","context","start","routesDirWithFiles","router","routesDir","body","getMiddlewareCalls","app","url","aliases","get","post","middleware","route","ctx","next","use","routes","getAlias","message","data","JSON","stringify","postAlias","routesDirModules","defaultImports"],"mappings":"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","sourcesContent":["import { equal } from 'zoroaster/assert'\nimport rqt from 'rqt'\nimport bodyparser from 'koa-bodyparser'\nimport context, { Context } from '../context' // eslint-disable-line no-unused-vars\nimport { initRoutes } from '../../src'\n\nconst initRoutesTestSuite = {\n  context,\n  async 'should not throw when files are found'({ start, routesDirWithFiles }) {\n    const { router } = await start()\n    await initRoutes(routesDirWithFiles, router)\n  },\n  async 'should use routes'({ start, routesDir }) {\n    const body = bodyparser()\n    let getMiddlewareCalls = 0\n    const { app, url, router } = await start()\n\n    await initRoutes(routesDir, router, {\n      aliases: {\n        get: {\n          '/test': ['/alias'],\n        },\n        post: {\n          '/test': ['/alias'],\n        },\n      },\n      middleware: {\n        get(route) {\n          return [\n            async (ctx, next) => {\n              getMiddlewareCalls += 1\n              await next()\n            },\n            route,\n          ]\n        },\n        post(route) {\n          return [body, route]\n        },\n      },\n    })\n    app.use(router.routes())\n\n    const get = await rqt(`${url}/test`)\n    equal(get, 'test dynamic route')\n    equal(getMiddlewareCalls, 1)\n\n    const getAlias = await rqt(`${url}/alias`)\n    equal(getAlias, 'test dynamic route')\n    equal(getMiddlewareCalls, 2)\n\n    const message = 'hello world'\n\n    const post = await rqt(`${url}/test`, {\n      data: JSON.stringify({ message }),\n    })\n    equal(post, `test default post request: ${message}`)\n\n    const postAlias = await rqt(`${url}/alias`, {\n      data: JSON.stringify({ message }),\n    })\n    equal(postAlias, `test default post request: ${message}`)\n  },\n  async 'should use routes (modules)'({ start, routesDirModules }) {\n    const body = bodyparser()\n    let getMiddlewareCalls = 0\n    const { app, url, router } = await start()\n\n    await initRoutes(routesDirModules, router, {\n      defaultImports: true,\n      aliases: {\n        get: {\n          '/test': ['/alias'],\n        },\n        post: {\n          '/test': ['/alias'],\n        },\n      },\n      middleware: {\n        get(route) {\n          return [\n            async (ctx, next) => {\n              getMiddlewareCalls += 1\n              await next()\n            },\n            route,\n          ]\n        },\n        post(route) {\n          return [body, route]\n        },\n      },\n    })\n    app.use(router.routes())\n\n    const get = await rqt(`${url}/test`)\n    equal(get, 'test dynamic route')\n    equal(getMiddlewareCalls, 1)\n\n    const getAlias = await rqt(`${url}/alias`)\n    equal(getAlias, 'test dynamic route')\n    equal(getMiddlewareCalls, 2)\n\n    const message = 'hello world'\n\n    const post = await rqt(`${url}/test`, {\n      data: JSON.stringify({ message }),\n    })\n    equal(post, `test default post request: ${message}`)\n\n    const postAlias = await rqt(`${url}/alias`, {\n      data: JSON.stringify({ message }),\n    })\n    equal(postAlias, `test default post request: ${message}`)\n  },\n}\n\nexport default initRoutesTestSuite\n"],"file":"init-routes.js"}