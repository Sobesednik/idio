{"version":3,"sources":["../../test/spec/index.js"],"names":["idioTestSuite","context","start","connect","databaseURL","autoConnect","undefined","api","called","f","Math","random","m","url","host","middleware","simpleRoute","function","app","multiplier","ctx","body","config","use","res"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAA8C;AAE9C,MAAMA,gBAAgB;AACpBC,2BADoB;;AAEpB,QAAM,sCAAN,CAA6C;AAAEC;AAAF,GAA7C,EAAwD;AACtD,UAAM;AAAEC;AAAF,QAAc,MAAMD,MAAM;AAC9BE,mBAAa,2BADiB;AAE9BC,mBAAa;AAFiB,KAAN,CAA1B;AAIA,uBAAM,OAAOF,OAAb,EAAsB,UAAtB;AACD,GARmB;;AASpB,QAAM,wBAAN,CAA+B;AAAED;AAAF,GAA/B,EAA0C;AACxC,UAAM;AAAEC;AAAF,QAAc,MAAMD,OAA1B;AACA,uBAAMC,OAAN,EAAeG,SAAf;AACD,GAZmB;;AAapB;;;AAGA,QAAM,8BAAN,CAAqCC,GAArC,EAA0C;AACxC,UAAM;AAAEL;AAAF,QAAYK,GAAlB;AACA,QAAIC,MAAJ;AACA,UAAMC,IAAIC,KAAKC,MAAL,KAAgB,IAA1B;AACA,UAAMC,IAAI,GAAV;AACA,UAAM;AAAEC;AAAF,QAAU,MAAMX,MAAM;AAC1BY,YAAM,SADoB;AAE1BC,kBAAY;AACVC,qBAAa;AACX,gBAAMC,QAAN,CAAeC,GAAf,EAAoB;AAAEC;AAAF,WAApB,EAAoC;AAClC,mBAAQC,GAAD,IAAS;AACdZ,uBAAS,IAAT;AACAY,kBAAIC,IAAJ,GAAWZ,IAAIU,UAAf;AACD,aAHD;AAID,WANU;;AAOXG,kBAAQ;AAAEH,wBAAYP;AAAd,WAPG;AAQXW,eAAK;AARM;AADH;AAFc,KAAN,CAAtB;AAeA,UAAMC,MAAM,MAAM,kBAAIX,GAAJ,CAAlB;AACA,uBAAML,MAAN,EAAc,IAAd;AACA,uBAAMgB,GAAN,EAAWf,IAAIG,CAAf;AACD;;AAvCmB,CAAtB;eA0CeZ,a","sourcesContent":["import rqt from 'rqt'\nimport { equal } from 'zoroaster/assert'\nimport context, { Context } from '../context' // eslint-disable-line no-unused-vars\n\nconst idioTestSuite = {\n  context,\n  async 'starts without a database connection'({ start }) {\n    const { connect } = await start({\n      databaseURL: 'mongodb://localhost:27018',\n      autoConnect: false,\n    })\n    equal(typeof connect, 'function')\n  },\n  async 'connects to a database'({ start }) {\n    const { connect } = await start()\n    equal(connect, undefined)\n  },\n  /**\n   * @param {ContextAPI} api\n   */\n  async 'sets up middleware correctly'(api) {\n    const { start } = api\n    let called\n    const f = Math.random() * 1000\n    const m = 100\n    const { url } = await start({\n      host: '0.0.0.0',\n      middleware: {\n        simpleRoute: {\n          async function(app, { multiplier }) {\n            return (ctx) => {\n              called = true\n              ctx.body = f * multiplier\n            }\n          },\n          config: { multiplier: m },\n          use: true,\n        },\n      },\n    })\n    const res = await rqt(url)\n    equal(called, true)\n    equal(res, f * m)\n  },\n}\n\nexport default idioTestSuite\n"],"file":"index.js"}