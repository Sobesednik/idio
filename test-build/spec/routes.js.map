{"version":3,"sources":["../../test/spec/routes.js"],"names":["RoutesTestSuite","context","initRoutes","routesDir","res","Object","keys","get","post","initRoutesDefault","routesDirModules","defaultImports","addRoutes","routes","ctx","body","addedRoutes","router","route","push","middleware","getMiddleware"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAD8C;AAG9C,MAAMA,kBAAkB;AACtBC,2BADsB;;AAEtB,QAAMC,UAAN,CAAiB;AAAEC;AAAF,GAAjB,EAAgC;AAC9B,UAAMC,MAAM,MAAM,wBAAWD,SAAX,CAAlB;AACA,2BAAUE,OAAOC,IAAP,CAAYF,GAAZ,CAAV,EAA4B,CAAC,KAAD,EAAQ,MAAR,CAA5B;AACA,2BAAUC,OAAOC,IAAP,CAAYF,IAAIG,GAAhB,CAAV,EAAgC,CAAC,QAAD,EAAW,OAAX,CAAhC;AACA,2BAAUF,OAAOC,IAAP,CAAYF,IAAII,IAAhB,CAAV,EAAiC,CAAC,OAAD,CAAjC;AACA,uBAAM,OAAOJ,IAAIG,GAAJ,CAAQ,OAAR,CAAb,EAA+B,UAA/B;AACA,uBAAM,OAAOH,IAAIG,GAAJ,CAAQ,QAAR,CAAb,EAAgC,UAAhC;AACA,uBAAM,OAAOH,IAAII,IAAJ,CAAS,OAAT,CAAb,EAAgC,UAAhC;AACD,GAVqB;;AAWtB,QAAMC,iBAAN,CAAwB;AAAEC;AAAF,GAAxB,EAA8C;AAC5C,UAAMN,MAAM,MAAM,wBAAWM,gBAAX,EAA6B;AAC7CC,sBAAgB;AAD6B,KAA7B,CAAlB;AAGA,2BAAUN,OAAOC,IAAP,CAAYF,GAAZ,CAAV,EAA4B,CAAC,KAAD,EAAQ,MAAR,CAA5B;AACA,2BAAUC,OAAOC,IAAP,CAAYF,IAAIG,GAAhB,CAAV,EAAgC,CAAC,OAAD,CAAhC;AACA,2BAAUF,OAAOC,IAAP,CAAYF,IAAII,IAAhB,CAAV,EAAiC,CAAC,OAAD,CAAjC;AACA,uBAAM,OAAOJ,IAAIG,GAAJ,CAAQ,OAAR,CAAb,EAA+B,UAA/B;AACA,uBAAM,OAAOH,IAAII,IAAJ,CAAS,OAAT,CAAb,EAAgC,UAAhC;AACD,GApBqB;;AAqBtBI,cAAY;AACV,UAAMC,SAAS;AACb,YAAM,OAAN,CAAcC,GAAd,EAAmB;AACjBA,YAAIC,IAAJ,GAAW,aAAX;AACD,OAHY;;AAIb,YAAM,QAAN,CAAeD,GAAf,EAAoB;AAClBA,YAAIC,IAAJ,GAAW,eAAX;AACD;;AANY,KAAf;AAQA,UAAMC,cAAc,EAApB;AACA,UAAMC,SAAS;AACbV,UAAI,GAAGW,KAAP,EAAc;AACZF,oBAAYG,IAAZ,CAAiBD,KAAjB;AACD;;AAHY,KAAf;;AAKA,UAAME,aAAa,MAAM,CAAE,CAA3B;;AACA,UAAMC,gBAAgBH,SAAS,CAACE,UAAD,EAAaF,KAAb,CAA/B;;AACA,2BAAUL,MAAV,EAAkB,KAAlB,EAAyBI,MAAzB,EAAiCI,aAAjC,EAAgD;AAC9C,eAAS,CAAC,GAAD,EAAM,QAAN;AADqC,KAAhD;AAGA,2BAAUL,WAAV,EAAuB,CACrB,CAAC,WAAD,EAAc,OAAd,EAAuBI,UAAvB,EAAmCP,OAAO,OAAP,CAAnC,CADqB,EAErB,CAAC,OAAD,EAAU,GAAV,EAAeO,UAAf,EAA2BP,OAAO,OAAP,CAA3B,CAFqB,EAGrB,CAAC,YAAD,EAAe,QAAf,EAAyBO,UAAzB,EAAqCP,OAAO,OAAP,CAArC,CAHqB,EAIrB,CAAC,YAAD,EAAe,QAAf,EAAyBO,UAAzB,EAAqCP,OAAO,QAAP,CAArC,CAJqB,CAAvB;AAMD;;AA/CqB,CAAxB;eAkDeb,e","sourcesContent":["import { deepEqual, equal } from 'zoroaster/assert'\nimport context, { Context } from '../context' // eslint-disable-line no-unused-vars\nimport { readRoutes, addRoutes } from '../../src/lib/routes'\n\nconst RoutesTestSuite = {\n  context,\n  async initRoutes({ routesDir }) {\n    const res = await readRoutes(routesDir)\n    deepEqual(Object.keys(res), ['get', 'post'])\n    deepEqual(Object.keys(res.get), ['/about', '/test'])\n    deepEqual(Object.keys(res.post), ['/test'])\n    equal(typeof res.get['/test'], 'function')\n    equal(typeof res.get['/about'], 'function')\n    equal(typeof res.post['/test'], 'function')\n  },\n  async initRoutesDefault({ routesDirModules }) {\n    const res = await readRoutes(routesDirModules, {\n      defaultImports: true,\n    })\n    deepEqual(Object.keys(res), ['get', 'post'])\n    deepEqual(Object.keys(res.get), ['/test'])\n    deepEqual(Object.keys(res.post), ['/test'])\n    equal(typeof res.get['/test'], 'function')\n    equal(typeof res.post['/test'], 'function')\n  },\n  addRoutes() {\n    const routes = {\n      async '/test'(ctx) {\n        ctx.body = 'hello world'\n      },\n      async '/test2'(ctx) {\n        ctx.body = 'hello world 2'\n      },\n    }\n    const addedRoutes = []\n    const router = {\n      get(...route) {\n        addedRoutes.push(route)\n      },\n    }\n    const middleware = () => {}\n    const getMiddleware = route => [middleware, route]\n    addRoutes(routes, 'get', router, getMiddleware, {\n      '/test': ['/', '/alias'],\n    })\n    deepEqual(addedRoutes, [\n      ['GET /test', '/test', middleware, routes['/test']],\n      ['GET /', '/', middleware, routes['/test']],\n      ['GET /alias', '/alias', middleware, routes['/test']],\n      ['GET /test2', '/test2', middleware, routes['/test2']],\n    ])\n  },\n}\n\nexport default RoutesTestSuite\n"],"file":"routes.js"}