{"version":3,"sources":["../../test/context/index.js"],"names":["SNAPSHOT_DIR","__dirname","context","app","routesDir","routesJsx","routesDirModules","routesDirWithFiles","snapshotDir","start","config","res","port","readFixture","dracula","_destroy","destroy","Context"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAAoD;AAEpD,MAAMA,eAAe,mBAAQC,SAAR,EAAmB,cAAnB,CAArB;AAEA;;;;;AAIe,eAAeC,OAAf,GAAyB;AACtC,MAAIC,GAAJ;AACA,OAAKC,SAAL,GAAiB,mBAAQH,SAAR,EAAmB,oBAAnB,CAAjB;AACA,OAAKI,SAAL,GAAiB,mBAAQJ,SAAR,EAAmB,wBAAnB,CAAjB;AACA,OAAKK,gBAAL,GAAwB,mBAAQL,SAAR,EAAmB,4BAAnB,CAAxB;AACA,OAAKM,kBAAL,GAA0B,mBAAQN,SAAR,EAAmB,+BAAnB,CAA1B;AACA,OAAKO,WAAL,GAAmBR,YAAnB;AAEA;;;;;AAIA,OAAKS,KAAL,GAAa,OAAOC,SAAS,EAAhB,KAAuB;AAClC,UAAMC,MAAM,MAAM,qBAAS;AACzBC,YAAM,CADmB;AAEzB,SAAGF;AAFsB,KAAT,CAAlB;AAIA,KAAC;AAAEP;AAAF,QAAUQ,GAAX;AACA,WAAOA,GAAP;AACD,GAPD;;AAQA,OAAKE,WAAL,GAAmB,YAAY;AAC7B,UAAMC,UAAU,MAAM,iBAAK,mBAAQb,SAAR,EAAmB,0BAAnB,CAAL,CAAtB;AACA,WAAOa,OAAP;AACD,GAHD;;AAIA,OAAKC,QAAL,GAAgB,YAAY;AAC1B,QAAIZ,GAAJ,EAAS,MAAMA,IAAIa,OAAJ,EAAN;AACV,GAFD;AAGD;AAGD;;;;;;;;;;;;;;;;AAiBA;;;;;AAGO,MAAMC,UAAU,EAAhB","sourcesContent":["import { resolve } from 'path'\nimport { read } from 'wrote'\nimport { startApp } from '../../src'\nimport { AppReturn, Config } from '../../src/types' // eslint-disable-line no-unused-vars\n\nconst SNAPSHOT_DIR = resolve(__dirname, '../snapshots')\n\n/**\n * A context which can start a server by passing it a config. The server will\n * be destroyed at the end of the test.\n */\nexport default async function context() {\n  let app\n  this.routesDir = resolve(__dirname, '../fixtures/routes')\n  this.routesJsx = resolve(__dirname, '../fixtures/routes-jsx')\n  this.routesDirModules = resolve(__dirname, '../fixtures/routes-modules')\n  this.routesDirWithFiles = resolve(__dirname, '../fixtures/routes-with-files')\n  this.snapshotDir = SNAPSHOT_DIR\n\n  /**\n   * Start a server\n   * @param {Config} config\n   */\n  this.start = async (config = {}) => {\n    const res = await startApp({\n      port: 0,\n      ...config,\n    });\n    ({ app } = res )\n    return res\n  }\n  this.readFixture = async () => {\n    const dracula = await read(resolve(__dirname, '../fixtures/chapter1.txt'))\n    return dracula\n  }\n  this._destroy = async () => {\n    if (app) await app.destroy()\n  }\n}\n\n\n/**\n * @typedef {Object} Context\n * @property {(config: Config) => Promise<AppReturn>} start Call startApp method from\n * the source code. The config argument will be passed as is and it's `port`\n * value will override default `0` (to start on random port) if present. To\n * access the server, `url` property can be used. The context will destroy\n * the server at the end of each test.\n * @property {() => Promise<string>} readFixture Reads a fixture\n * (chapter 1 of Dracula) and returns as a string\n * @property {string} routesDir\n * @property {string} routesJsx\n * @property {string} routesDirModules\n * @property {string} routesDirWithFiles\n * @property {string} snapshotDir Directory for snapshots.\n */\n\n\n/**\n * @type {Context}\n */\nexport const Context = {}\n"],"file":"index.js"}